@gutter          : 20px;
// use even numbers below if using pixels
@gutter768Total  : 20px;
@gutter992Total  : 30px;
@gutter1382Total : 40px;
@gutterIETotal   : 30px;

@gutter768       : (@gutter768Total / 2);
@gutter992       : (@gutter992Total / 2);
@gutter1382      : (@gutter1382Total / 2);
@gutterIE        : (@gutterIETotal / 2);

// ROWS
// ----------------------------------------------------
// Rows contain columns.
// nocol is for rows that will contain no columns for correct grid alignment.
// nest is for nested rows for correct grid alignment.
// Call each row in the corresponding media query. 
// If you are in 768.less then use .row(768).
// .home-blocks-wrap { .row(768); .clearfix(); }
.row(nest)        { margin-left: -@gutter; margin-right: -@gutter; }
.row(nocol)       { padding-left: @gutter; padding-right: @gutter; }

.row(768)         { padding-left: @gutter768; padding-right: @gutter768; }
.row(768, nest)   { margin-left: -@gutter768; margin-right: -@gutter768; }
.row(768, nocol)  { padding-left: @gutter768Total; padding-right: @gutter768Total; }

.row(992)         { padding-left: @gutter992; padding-right: @gutter992; }
.row(992, nest)   { margin-left: -@gutter992; margin-right: -@gutter992; }
.row(992, nocol)  { padding-left: @gutter992Total;  padding-right: @gutter992Total; }

.row(1382)        { padding-left: @gutter1382; padding-right: @gutter1382; }
.row(1382, nest)  { margin-left: -@gutter1382; margin-right: -@gutter1382; }
.row(1382, nocol) { padding-left: @gutter1382Total; padding-right: @gutter1382Total; }

.row(ie)          { padding-left: @gutterIE; padding-right: @gutterIE; }
.row(ie, nest)    { margin-left: -@gutterIE; margin-right: -@gutterIE; }
.row(ie, nocol)   { padding-left: @gutterIETotal; padding-right: @gutterIETotal; }

.row(nopadding)   { padding-left: 0; padding-right: 0; }
.row(nomargin)    { margin-left: 0; margin-right: 0; }

// COLUMNS
// ----------------------------------------------
// If you desire a column width of 2/3 .column(2,3);
// #main { .column(2,3); }
.column(@column, @totalColumns) {
  float: left;
  width: (100 / @totalColumns) * @column * 1%;
}

// WIDTHS
// -----------------------------------------------------------------
// If you desire a just a width of 2/3 and no float use .width(2,3);
.width(@column, @totalColumns) {
  width: (100 / @totalColumns) * @column * 1%;
}

// COLUMN GUTTERS
// --------------------------------------------------------
// Call each gutter width in the corresponding media query.
// If you are in 768.less then use .gutter(768);
//  #main { .column(2,3); .gutter(768); }
.column()     { padding-left: @gutter; padding-right: @gutter; }
.column(768)  { padding-left: @gutter768; padding-right: @gutter768; }
.column(992)  { padding-left: @gutter992; padding-right: @gutter992; }
.column(1382) { padding-left: @gutter1382; padding-right: @gutter1382; }
.column(ie)   { padding-left: @gutterIE; padding-right: @gutterIE; }

// COLUMN OFFSET
// ---------------------------------------------------
// Offset and column must total one.
// #main { .column(3,4); .offset(1,4); .gutter(768); }
.makeOffset(@column, @totalColumns) {
  margin-left: (100 / @totalColumns) * @column * 1%;
}

// BLOCK GRIDS
// -----------------------------------------------
// Example use would be an image thubmnail gallery
// ul.gallery { .blockGrid(4, 30px, li); }
.blockGrid(@x, @gutter, @child: li) {
  margin: 0 -((@gutter / 2) * 1px);
  padding: 0;
  list-style: none;
  (~"> @{child}"){
    float: left;
    width: (100 / @x) * 1%;
    padding: 0 @gutter;
    line-height: 1;
  }
  (~"> @{child}:nth-child(@{x}n+1)") {
    clear: both;
  }
}

// OOCSS Grid classes
// Called in main.less and main-ie.less
#grid {

  .modern() {

    .row {
      .clearfix();
      &.nocolumns {
        .row(nocol);
      }
      .row {
        .row(nest);
        &.fullwidth {
          margin-left: -(@gutter * 2);
          margin-right: -(@gutter * 2);
        }
      }
    }
    .column {
      .column();
    }

    @media only screen and (min-width: 768px) {

      .row {
        .row(768);
        &.nocolumns {
          .row(768,nocol);
        }
        &.fullwidth {
          .row(nopadding);
        }
        .row {
          .row(768,nest);
          .row(nopadding);
          &.fullwidth {
            .row(nomargin);
          }
          &.collapse {
            .row(nomargin);
            .row(768);
          }
        }
      }
      .column {
        float: left;
        .column(768);
      }
      .width1of1 { .width(1,1); }
      .width1of2, .width2of4 { .width(1,2); }
      .width1of3 { .width(1,3); }
      .width2of3 { .width(2,3); }
      .width1of4 { .width(1,4); }
      .width3of4 { .width(3,4); }
      .width1of5 { .width(1,5); }
      .width2of5 { .width(2,5); }
      .width3of5 { .width(3,5); }
      .width4of5 { .width(4,5); }

    } // end 768

    @media only screen and (min-width: 992px) {

      .row {
        .row(992);
        &.nocolumns {
          .row(992,nocol);
        }
        .row {
          .row(992,nest);
          &.collapse {
            .row(992);
          }
        }
      }
      .column {
        .column(992);
      }

    } // end 992

    @media only screen and (min-width: 1382px) {

      .row {
        .row(1382);
        &.nocolumns {
          .row(1382,nocol);
        }
        .row {
          .row(1382,nest);
          &.collapse {
            .row(1382);
          }
        }
      }
      .column {
        .column(1382);
      }

    } // end 1382

  } // end .modern()

  .ie() {

    .row {
      .row(ie);
      .clearfix();
      &.nocolumns {
        .row(ie,nocol);
      }
      &.fullwidth {
        .row(nopadding)
      }
      .row {
        .row(ie,nest);
        .row(nopadding);
        &.fullwidth {
          .row(nomargin);
        }
        &.collapse {
          .row(nomargin);
          .row(ie);
        }
      }
    }
    .column {
      float: left;
      .column(ie);
    }
    .width1of1 { .width(1,1); }
    .width1of2, .width2of4 { .width(1,2); }
    .width1of3 { .width(1,3); }
    .width2of3 { .width(2,3); }
    .width1of4 { .width(1,4); }
    .width3of4 { .width(3,4); }
    .width1of5 { .width(1,5); }
    .width2of5 { .width(2,5); }
    .width3of5 { .width(3,5); }
    .width4of5 { .width(4,5); }

  } // end ie

} // end #grid